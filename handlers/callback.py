# (C) supun-maduraga my best friend for his project on call-music-plus

from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, Chat, CallbackQuery
from helpers.decorators import authorized_users_only
from config import BOT_NAME, BOT_USERNAME, OWNER_NAME, GROUP_SUPPORT, UPDATES_CHANNEL, ASSISTANT_NAME
from handlers.play import cb_admin_check


@Client.on_callback_query(filters.regex("cbstart"))
async def cbstart(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>‚ú® **·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á {message.from_user.first_name}** \n
·™• **[{BOT_NAME}](https://t.me/{BOT_USERNAME}) ·¥Ä ü ü·¥è·¥°  è·¥è·¥ú ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ ·¥è…¥ …¢ Ä·¥è·¥ú·¥òs ·¥õ ú Ä·¥è·¥ú…¢ ú ·¥õ ú·¥á …¥·¥á·¥° ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç's ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ !**

·™• **Íú∞…™…¥·¥Ö ·¥è·¥ú·¥õ ·¥Ä ü ü ·¥õ ú·¥á  ô·¥è·¥õ's ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä…¥·¥Ö  ú·¥è·¥° ·¥õ ú·¥á è ·¥°·¥è Ä·¥ã  ô è ·¥Ñ ü…™·¥Ñ·¥ã…™…¥…¢ ·¥è…¥ ·¥õ ú·¥á ¬ª üìö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös  ô·¥ú·¥õ·¥õ·¥è…¥ !**

·™• **Íú∞·¥è Ä …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä ü ü Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥á ·¥èÍú∞ ·¥õ ú…™s  ô·¥è·¥õ, ·¥ä·¥ús·¥õ ·¥õ è·¥ò·¥á /help**

·™• **·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è [·¥ç·¥è·¥è…¥](https://t.me/{OWNER_NAME})**
<b>""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="cbcmds")
                ],[
                    InlineKeyboardButton(
                        "‚òÄÔ∏è ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url=f"https://t.me/{UPDATES_CHANNEL}"), 
                    InlineKeyboardButton(
                        "‚ö° ·¥è·¥°…¥·¥á Ä", url=f"https://t.me/{OWNER_NAME}")
                ],[
                    InlineKeyboardButton(
                        "s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á", url="https://github.com/levina-lab/VeezMusic")
                ] 
            ]
        ),
     disable_web_page_preview=True
    )


@Client.on_callback_query(filters.regex("cbhelp"))
async def cbhelp(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üí°  ú·¥á ü ü·¥è, ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú !</b>

**…™…¥ ·¥õ ú…™s ·¥ç·¥á…¥·¥ú  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥è·¥ò·¥á…¥ s·¥á·¥†·¥á Ä·¥Ä ü ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ç·¥á…¥·¥ús, …™…¥ ·¥á·¥Ä·¥Ñ ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ç·¥á…¥·¥ú ·¥õ ú·¥á Ä·¥á …™s ·¥Ä üs·¥è ·¥Ä  ô Ä…™·¥áÍú∞ ·¥áx·¥ò ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥ ·¥èÍú∞ ·¥á·¥Ä·¥Ñ ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö**

‚ö° __·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è {BOT_NAME} __""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìö  ô·¥Äs…™·¥Ñ ·¥Ñ·¥ç·¥Ö", callback_data="cbbasic"
                    ),
                    InlineKeyboardButton(
                        "üìï ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ñ·¥ç·¥Ö", callback_data="cbadvanced"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìò ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥ç·¥Ö", callback_data="cbadmin"
                    ),
                    InlineKeyboardButton(
                        "üìî Íú∞·¥ú…¥ ·¥Ñ·¥ç·¥Ö", callback_data="cbfun"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üè° BACK TO HELP", callback_data="cbguide"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbbasic"))
async def cbbasic(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ Here is the basic commands</b>

üéß [ GROUP VC CMD ]

/play (song name) - play song from youtube
/ytp (song name) - play song directly from youtube 
/stream (reply to audio) - play song using audio file
/playlist - show the list song in queue
/song (song name) - download song from youtube
/search (video name)¬†- search video from youtube detailed
/vsong (video name)¬†- download video from youtube detailed
/lyric - (song name) lyrics scrapper
/vk (song name) - download song from inline mode

üéß [ CHANNEL VC CMD ]

/cplay - stream music on channel voice chat
/cplayer - show the song in streaming
/cpause - pause the streaming music
/cresume - resume the streaming was paused
/cskip - skip streaming to the next song
/cend - end the streaming music
/admincache - refresh the admin cache
/ubjoinc - invite the assistant for join to your channel

‚ö° __Powered by {BOT_NAME} __""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° BACK", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbadvanced"))
async def cbadvanced(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ Here is the advanced commands</b>

/start (in group) - see the bot alive status
/reload - reload bot and refresh the admin list
/cache - refresh the admin cache
/ping - check the bot ping status
/uptime - check the bot uptime status

‚ö° __Powered by {BOT_NAME} """,
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° BACK", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbadmin"))
async def cbadmin(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ Here is the admin commands</b>

/player - show the music playing status
/pause - pause the music streaming
/resume - resume the music was paused
/skip - skip to the next song
/end - stop music streaming
/userbotjoin - invite assistant join to your group
/auth - authorized user for using music bot
/deauth - unauthorized for using music bot
/control - open the player settings panel
/delcmd (on | off) - enable / disable del cmd feature
/musicplayer (on / off) - disable / enable music player in your group

‚ö° __Powered by {BOT_NAME} __""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° BACK", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbsudo"))
async def cbsudo(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ Here is the sudo commands</b>

/userbotleaveall - order the assistant to leave from all group
/gcast - send a broadcast message trought the assistant
/stats - show the bot statistic

‚ö° __Powered by {BOT_NAME} __""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° BACK", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbowner"))
async def cbowner(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ Here is the owner commands</b>

/stats - show the bot statistic
/broadcast - send a broadcast message from bot
/block (user id - duration - reason) - block user for using your bot
/unblock (user id - reason) - unblock user you blocked for using your bot
/blocklist - show you the list of user was blocked for using your bot

üìù note: all commands owned by this bot can be executed by the owner of the bot without any exceptions.

‚ö° __Powered by {BOT_NAME} __""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° BACK", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbfun"))
async def cbfun(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ Here is the fun commands</b>

/chika - check it by yourself
/truth - check it by yourself
/dare - check it by yourself

‚ö° __Powered by {BOT_NAME} __""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° BACK", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbguide"))
async def cbguide(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""‚ùì HOW TO USE THIS BOT:

1. First, add me to your group.
2. Then promote me as admin and give all permissions except anonymous admin.
3. Add @{ASSISTANT_NAME} to your group or type /userbotjoin to invite her.
4. Turn on the voice chat first before start to play music.

‚ö° __Powered by {BOT_NAME} """,
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìö Command List", callback_data="cbhelp"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë Close", callback_data="close"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("close"))
async def close(_, query: CallbackQuery):
    await query.message.delete()


@Client.on_callback_query(filters.regex("cbback"))
@cb_admin_check
async def cbback(_, query: CallbackQuery):
    await query.edit_message_text(
        "**üí° here is the control menu of bot:**",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "‚è∏ pause", callback_data="cbpause"
                    ),
                    InlineKeyboardButton(
                        "‚ñ∂Ô∏è resume", callback_data="cbresume"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚è© skip", callback_data="cbskip"
                    ),
                    InlineKeyboardButton(
                        "‚èπ end", callback_data="cbend"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚õî anti cmd", callback_data="cbdelcmds"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë Close", callback_data="close"
                    )
                ]
            ]
        )
    )



@Client.on_callback_query(filters.regex("cbdelcmds"))
@cb_admin_check
@authorized_users_only
async def cbdelcmds(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>this is the feature information:</b>
        
**üí° Feature:** delete every commands sent by users to avoid spam in groups !

**‚ùî usage:**

 1Ô∏è‚É£ to turn on feature:
     ¬ª type `/delcmd on`
    
 2Ô∏è‚É£ to turn off feature:
     ¬ª type `/delcmd off`
      
‚ö° __Powered by {BOT_NAME} """,
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° BACK", callback_data="cbback"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbcmds"))
async def cbhelps(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üí°  ú·¥á ü ü·¥è, ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú !</b>

**…™…¥ ·¥õ ú…™s ·¥ç·¥á…¥·¥ú  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥è·¥ò·¥á…¥ s·¥á·¥†·¥á Ä·¥Ä ü ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ç·¥á…¥·¥ús, …™…¥ ·¥á·¥Ä·¥Ñ ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ç·¥á…¥·¥ú ·¥õ ú·¥á Ä·¥á …™s ·¥Ä üs·¥è ·¥Ä  ô Ä…™·¥áÍú∞ ·¥áx·¥ò ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥ ·¥èÍú∞ ·¥á·¥Ä·¥Ñ ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö**

‚ö° __·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è {BOT_NAME} __""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìö  ô·¥Äs…™·¥Ñ ·¥Ñ·¥ç·¥Ö", callback_data="cbbasic"
                    ),
                    InlineKeyboardButton(
                        "üìï ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ñ·¥ç·¥Ö", callback_data="cbadvanced"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìò ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥ç·¥Ö", callback_data="cbadmin"
                    ),
                    InlineKeyboardButton(
                        "üìî Íú∞·¥ú…¥ ·¥Ñ·¥ç·¥Ö", callback_data="cbfun"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üè° BACK TO HOME", callback_data="cbstart"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbhowtouse"))
async def cbguides(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""‚ùì HOW TO USE THIS BOT:

1. First, add me to your group.
2. Then promote me as admin and give all permissions except anonymous admin.
3. Add @{ASSISTANT_NAME} to your group or type /userbotjoin to invite her.
4. Turn on the voice chat first before start to play music.

‚ö° __Powered by {BOT_NAME} __""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° BACK TO HOME", callback_data="cbstart"
                    )
                ]
            ]
        )
    )
